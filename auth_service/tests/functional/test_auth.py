import pytest
from httpx import AsyncClient
from http import HTTPStatus


@pytest.mark.asyncio
async def test_login_oauth2_success(client: AsyncClient, create_user):
    """–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ /login (form-data)"""
    await create_user("john", "john@example.com", "password123")

    response = await client.post(
        "/api/v1/auth/login",
        data={"username": "john", "password": "password123"},
    )
    assert response.status_code == HTTPStatus.OK
    tokens = response.json()
    assert "access_token" in tokens
    assert "refresh_token" in tokens
    assert response.cookies.get("refresh_token") is not None


@pytest.mark.asyncio
async def test_login_oauth2_invalid_credentials(
        client: AsyncClient, create_user):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ —á–µ—Ä–µ–∑ /login"""
    await create_user("mike", "mike@example.com", "password123")

    response = await client.post(
        "/api/v1/auth/login",
        data={"username": "mike", "password": "wrongpass"},
    )
    assert response.status_code == HTTPStatus.UNAUTHORIZED


@pytest.mark.asyncio
async def test_login_json_success(client: AsyncClient, create_user):
    """–£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω —á–µ—Ä–µ–∑ /login-json (JSON body)"""
    await create_user("alice", "alice@example.com", "password123")

    response = await client.post(
        "/api/v1/auth/login-json",
        json={"username": "alice", "password": "password123"},
    )
    assert response.status_code == HTTPStatus.OK
    tokens = response.json()
    assert "access_token" in tokens
    assert "refresh_token" in tokens
    # ‚ùå –∫—É–∫—É —Ç—É—Ç –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ç.–∫. —ç—Ç–æ —á–∏—Å—Ç—ã–π REST endpoint


@pytest.mark.asyncio
async def test_login_json_invalid_credentials(
        client: AsyncClient, create_user):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø–∞—Ä–æ–ª–µ —á–µ—Ä–µ–∑ /login-json"""
    await create_user("bob", "bob@example.com", "password123")

    response = await client.post(
        "/api/v1/auth/login-json",
        json={"username": "bob", "password": "wrongpass"},
    )
    assert response.status_code == HTTPStatus.UNAUTHORIZED


@pytest.mark.asyncio
async def test_refresh_success(client: AsyncClient, create_user):
    """–£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ /refresh (cookie refresh_token)"""
    await create_user("kate", "kate@example.com", "password123")

    # –ª–æ–≥–∏–Ω–∏–º—Å—è —á–µ—Ä–µ–∑ /login ‚Üí –ø–æ–ª—É—á–∞–µ–º cookie
    login_resp = await client.post(
        "/api/v1/auth/login",
        data={"username": "kate", "password": "password123"},
    )
    refresh_cookie = login_resp.cookies.get("refresh_token")
    assert refresh_cookie is not None

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
    client.cookies.set("refresh_token", refresh_cookie)
    refresh_resp = await client.post("/api/v1/auth/refresh")

    assert refresh_resp.status_code == HTTPStatus.OK
    tokens = refresh_resp.json()
    assert "access_token" in tokens
    assert "refresh_token" in tokens


@pytest.mark.asyncio
async def test_refresh_no_cookie(client: AsyncClient):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ cookie –≤ /refresh"""
    client.cookies.clear()   # üëà —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–∫–∏
    response = await client.post("/api/v1/auth/refresh")
    assert response.status_code == HTTPStatus.BAD_REQUEST


@pytest.mark.asyncio
async def test_logout_blacklist(
        client: AsyncClient, create_user, redis_client):
    """Logout –¥–æ–±–∞–≤–ª—è–µ—Ç refresh_token –≤ blacklist –∏ –æ—á–∏—â–∞–µ—Ç cookie"""
    await create_user("nick", "nick@example.com", "password123")

    # –ª–æ–≥–∏–Ω–∏–º—Å—è —á–µ—Ä–µ–∑ /login ‚Üí –∫—É–∫–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    login_resp = await client.post(
        "/api/v1/auth/login",
        data={"username": "nick", "password": "password123"},
    )
    assert login_resp.status_code == HTTPStatus.OK

    refresh_cookie = login_resp.cookies.get("refresh_token")
    assert refresh_cookie is not None

    # –≤—ã–∑—ã–≤–∞–µ–º logout
    logout_resp = await client.post("/api/v1/auth/logout")
    assert logout_resp.status_code == HTTPStatus.OK
    assert logout_resp.json()["detail"] == "Logged out successfully"

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –ø–æ–ø–∞–ª –≤ blacklist
    keys = await redis_client.keys("blacklist:*")
    assert len(keys) > 0

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É–∫–∞ –æ—á–∏—â–µ–Ω–∞
    assert client.cookies.get("refresh_token") is None
