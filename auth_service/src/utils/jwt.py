import uuid
import jwt
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, Optional
from jwcrypto import jwk

from fastapi import HTTPException, status
from redis.asyncio import Redis

from core.config import settings


# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
ACCESS_TOKEN_EXPIRE_MINUTES = 15
REFRESH_TOKEN_EXPIRE_DAYS = 7


# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ----------
def create_token(data: dict, expires_delta: timedelta, token_type: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç JWT, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º (RS256)"""
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + expires_delta
    jti = str(uuid.uuid4())  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç–æ–∫–µ–Ω–∞
    to_encode.update({"exp": expire, "type": token_type, "jti": jti})
    key = jwk.JWK.from_pem(settings.jwt_private_key.encode())
    header = {"alg": settings.jwt_algorithm, "kid": key.thumbprint()}
    return jwt.encode(
        to_encode,
        settings.jwt_private_key,
        algorithm=settings.jwt_algorithm,
        headers=header,
    )


def create_access_token(data: dict) -> str:
    return create_token(
        data, timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES), "access"
    )


def create_refresh_token(data: dict) -> str:
    return create_token(
        data, timedelta(days=REFRESH_TOKEN_EXPIRE_DAYS), "refresh"
    )


def create_token_pair(user_id: str, email: str) -> Dict[str, str]:
    """–í–µ—Ä–Ω—É—Ç—å –ø–∞—Ä—É access/refresh —Ç–æ–∫–µ–Ω–æ–≤"""
    payload = {"sub": user_id, "email": email}
    return {
        "access_token": create_access_token(payload),
        "refresh_token": create_refresh_token(payload),
        "token_type": "bearer",
    }


# ---------- Blacklist ----------
async def is_token_blacklisted(redis: Optional[Redis], jti: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ blacklist"""
    if not redis:
        return False
    return await redis.exists(f"blacklist:{jti}") == 1


# ---------- –î–µ–∫–æ–¥ + –ø—Ä–æ–≤–µ—Ä–∫–∞ ----------
async def decode_token(
    token: str, redis: Optional[Redis] = None
) -> dict[str, Any]:
    try:
        payload = jwt.decode(
            token,
            settings.jwt_public_key,   # üîë –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
            algorithms=[settings.jwt_algorithm],
        )
    except jwt.ExpiredSignatureError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Token expired"
        )
    except jwt.InvalidTokenError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ blacklist
    jti = payload.get("jti")
    if jti and await is_token_blacklisted(redis, jti):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED, detail="Token revoked"
        )

    return payload


# ---------- TTL ----------
def get_token_ttl(token: str) -> int:
    """–í–µ—Ä–Ω—É—Ç—å TTL —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è Redis)"""
    payload = jwt.decode(
        token,
        settings.jwt_public_key,   # üîë –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        algorithms=[settings.jwt_algorithm],
        options={"verify_exp": False},
    )
    exp = payload.get("exp")
    if not exp:
        return 0
    now = datetime.now(timezone.utc).timestamp()
    return max(0, int(exp - now))
