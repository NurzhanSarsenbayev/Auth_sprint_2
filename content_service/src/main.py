import asyncio
from contextlib import asynccontextmanager
import logging
from logging.config import dictConfig

from elasticsearch import AsyncElasticsearch
from fastapi import FastAPI
from fastapi.responses import ORJSONResponse
from redis.asyncio import Redis

from core.config import settings
from core.telemetry import setup_tracing, instrument_app, shutdown_tracing
from core.logger import LOGGING

from api.v1 import films, genres, persons, search, ping
from services.cache_builder import wait_for_elastic
from middleware.request_id import RequestIDMiddleware
from middleware.rate_limit import RateLimitMiddleware

# üëá –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è JWKS
from utils.jwt import get_jwks


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
dictConfig(LOGGING)
logger = logging.getLogger("app")


async def jwks_refresher(cache: Redis, interval: int = 600):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JWKS –∏–∑ Auth."""
    logger.info(f"üöÄ JWKS refresher –∑–∞–ø—É—â–µ–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª = {interval} —Å–µ–∫.")
    while True:
        try:
            jwks = await get_jwks(cache)
            kids = [k.get("kid") for k in jwks.get("keys", [])]
            logger.info(
                "‚úÖ JWKS –æ–±–Ω–æ–≤–ª—ë–Ω, –∫–ª—é—á–µ–π: %s, kids=%s",
                len(kids),
                kids,
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è JWKS: {e}")
        finally:
            logger.debug(
                "‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
                " JWKS —á–µ—Ä–µ–∑ %s —Å–µ–∫—É–Ω–¥", interval)
            await asyncio.sleep(interval)


@asynccontextmanager
async def lifespan(app: FastAPI):
    # --- startup ---
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Content Service (lifespan.startup)")

    app.state.redis_storage = Redis(
        host=settings.redis_host,
        port=settings.redis_port
    )
    app.state.es_storage = AsyncElasticsearch(
        hosts=[f"http://{settings.elastic_host}:{settings.elastic_port}"]
    )

    # –∂–¥—ë–º Elastic –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await wait_for_elastic(app.state.es_storage, timeout=60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–±–Ω–æ–≤–∏—Ç–µ–ª—å JWKS
    task = asyncio.create_task(
        jwks_refresher(app.state.redis_storage, interval=600))
    app.state.jwks_refresher_task = task
    logger.info("‚úÖ JWKS refresher task started")

    yield  # –∑–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ

    # --- shutdown ---
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Content Service (lifespan.shutdown)")
    task.cancel()
    try:
        await task
    except asyncio.CancelledError:
        logger.info("‚úÖ JWKS refresher task cancelled")

    await app.state.redis_storage.close()
    await app.state.es_storage.close()
    logger.info("‚úÖ Redis –∏ Elasticsearch —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

    shutdown_tracing()
    logger.info("‚úÖ OpenTelemetry —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# --- –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–π—Å–∏–Ω–≥ ---
if settings.enable_tracer:
    setup_tracing(settings.otel_service_name)
else:
    logger.info("üö´ OpenTelemetry –æ—Ç–∫–ª—é—á—ë–Ω (ENABLE_TRACER=False)")

# --- FastAPI App ---
app = FastAPI(
    title="Read-only API –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞",
    openapi_url="/api/openapi",
    default_response_class=ORJSONResponse,
    description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–∞—Ö,"
                " –∂–∞–Ω—Ä–∞—Ö –∏ –ª—é–¥—è—Ö,"
                " —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö"
                " –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
    version="1.0.0",
    lifespan=lifespan,
)

# --- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏—Ä—É–µ–º app ---
instrument_app(app)

# üëá Middleware
app.add_middleware(RateLimitMiddleware, max_requests=5, window_seconds=10)
app.add_middleware(RequestIDMiddleware)

# --- –†–æ—É—Ç–µ—Ä—ã ---
app.include_router(search.router, prefix="/api/v1/search", tags=["search"])
app.include_router(films.router, prefix="/api/v1/films", tags=["films"])
app.include_router(genres.router, prefix="/api/v1/genres", tags=["genres"])
app.include_router(persons.router, prefix="/api/v1/persons", tags=["persons"])
app.include_router(ping.router, prefix="/api/v1/ping", tags=["ping"])
